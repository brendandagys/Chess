AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for chess serverless API.

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    MemorySize: 128

Parameters:
  ApiGatewayCloudWatchRoleArn:
    Type: String
    Default: arn:aws:iam::708746137251:role/allow-api-gateway-to-push-to-cloudwatch-logs
    Description: CloudWatch role ARN for API Gateway to push logs

  # DynamoDBEndpoint:
  #   Type: String
  #   Default: https://dynamodb.us-east-1.amazonaws.com

  GameTableName:
    Type: String
    Default: game
    Description: Name of the DynamoDB table for games

  UserTableName:
    Type: String
    Default: user
    Description: Name of the DynamoDB table for users

Resources:
  # API
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref AWS::StackName
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !Ref ApiGatewayCloudWatchRoleArn

  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - GameRoute
    Properties:
      ApiId: !Ref WebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      DeploymentId: !Ref WebSocketDeployment
      ApiId: !Ref WebSocketApi
      AutoDeploy: true

  # CONNECT
  ConnectFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
      BuildProperties:
        Binary: connect
    Properties:
      CodeUri: ./rust_app
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - arm64
      Environment:
        Variables:
          # DYNAMODB_ENDPOINT: !Ref DynamoDBEndpoint
          GAME_TABLE: !Ref GameTableName
          USER_TABLE: !Ref UserTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GameTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTableName

  ConnectFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectFunction
      Principal: apigateway.amazonaws.com

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationUri: !GetAtt ConnectFunction.Arn
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: "1.0"

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$connect"
      Target: !Sub "integrations/${ConnectIntegration}"

  ConnectRouteResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref WebSocketApi
      RouteId: !Ref ConnectRoute
      RouteResponseKey: "$default"

  # DISCONNECT
  DisconnectFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
      BuildProperties:
        Binary: disconnect
    Properties:
      CodeUri: ./rust_app
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - arm64
      Environment:
        Variables:
          # DYNAMODB_ENDPOINT: !Ref DynamoDBEndpoint
          GAME_TABLE: !Ref GameTableName
          USER_TABLE: !Ref UserTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GameTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTableName

  DisconnectFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DisconnectFunction
      Principal: apigateway.amazonaws.com

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationUri: !GetAtt DisconnectFunction.Arn
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: "1.0"

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$disconnect"
      Target: !Sub "integrations/${DisconnectIntegration}"

  DisconnectRouteResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref WebSocketApi
      RouteId: !Ref DisconnectRoute
      RouteResponseKey: "$default"

  # GAME
  GameFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
      BuildProperties:
        Binary: game
    Properties:
      CodeUri: ./rust_app
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - arm64
      Environment:
        Variables:
          # DYNAMODB_ENDPOINT: !Ref DynamoDBEndpoint
          GAME_TABLE: !Ref GameTableName
          USER_TABLE: !Ref UserTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GameTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTableName

  GameFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GameFunction
      Principal: apigateway.amazonaws.com

  GameIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationUri: !GetAtt GameFunction.Arn
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: "1.0"

  GameRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: game
      Target: !Sub "integrations/${GameIntegration}"

  GameRouteResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref WebSocketApi
      RouteId: !Ref GameRoute
      RouteResponseKey: "$default"

  # DATABASE
  GameTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref GameTableName
      KeySchema:
        - AttributeName: game_id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: game_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: project
          Value: !Ref AWS::StackName

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref UserTableName
      KeySchema:
        - AttributeName: username
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: username
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: connection_id
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: find-games-upon-disconnect
          KeySchema:
            - AttributeName: connection_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: project
          Value: !Ref AWS::StackName

Outputs:
  WebSocketApiUrl:
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
